<?xml version="1.0"?>
<doc>
    <assembly>
        <name>soa.qa.api</name>
    </assembly>
    <members>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.PostAnswerRouteAsync(soa.common.dtos.Vms.Answers.AnswerForCreationUiModel)">
            <summary>
            POST : Create a New Answer.
            </summary>
            <param name="AnswerForCreationDto">AnswerForCreationDto the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Answer is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the Answer is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.GetAnswerAsync(System.Int32)">
            <summary>
            Get : Retrieve Stored providing Answer Id
            </summary>
            <param name="id">Answer Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Answer</param>
            <remarks>Retrieve Answer Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.UpdateAnswerAsync(System.Int32,soa.common.dtos.Vms.Answers.AnswerForModificationUiModel)">
            <summary>
            PUT : Update Answer with New Answer Name
            </summary>
            <param name="id">Answer Id the Request Index for Retrieval</param>
            <param name="updatedAnswer">AnswerForModification the Request Model with New Answer Name</param>
            <remarks>Change Answer providing AnswerForModificationUiModel with Modified Answer Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.DeleteAnswerRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Answer 
            </summary>
            <param name="id">Answer Id for Deletion</param>
            <remarks>Delete Existing Answer </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.DeleteHardAnswerRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Answer 
            </summary>
            <param name="id">Answer Id for Deletion</param>
            <remarks>Delete Existing Answer </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.AnswersController.GetAnswersAsync">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Answers 
            </summary>
            <remarks>Retrieve paged Answers providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.PostCategoryRouteAsync(soa.common.dtos.Vms.Categories.CategoryForCreationUiModel)">
            <summary>
            POST : Create a New Category.
            </summary>
            <param name="categoryForCreationDto">CategoryForCreationDto the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Category is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the Category is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.GetCategoryAsync(System.Int32)">
            <summary>
            Get : Retrieve Stored providing Category Id
            </summary>
            <param name="id">Category Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Category</param>
            <remarks>Retrieve Category Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.UpdateCategoryAsync(System.Int32,soa.common.dtos.Vms.Categories.CategoryForModificationUiModel)">
            <summary>
            PUT : Update Category with New Category Name
            </summary>
            <param name="id">Category Id the Request Index for Retrieval</param>
            <param name="updatedCategory">CategoryForModification the Request Model with New Category Name</param>
            <remarks>Change Category providing CategoryForModificationUiModel with Modified Category Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.DeleteCategoryRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Category 
            </summary>
            <param name="id">Category Id for Deletion</param>
            <remarks>Delete Existing Category </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.DeleteHardCategoryRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Category 
            </summary>
            <param name="id">Category Id for Deletion</param>
            <remarks>Delete Existing Category </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.CategoriesController.GetCategoriesAsync">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Categories 
            </summary>
            <remarks>Retrieve paged Categories providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.PostPersonRouteAsync(soa.common.dtos.Vms.Persons.PersonForCreationUiModel)">
            <summary>
            POST : Create a New Person.
            </summary>
            <param name="personForCreationDto">PersonForCreationDto the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Person is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the Person is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.GetPersonAsync(System.Int32)">
            <summary>
            Get : Retrieve Stored providing Person Id
            </summary>
            <param name="id">Person Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Person</param>
            <remarks>Retrieve Person Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.UpdatePersonAsync(System.Int32,soa.common.dtos.Vms.Persons.PersonForModificationUiModel)">
            <summary>
            PUT : Update Person with New Person Name
            </summary>
            <param name="id">Person Id the Request Index for Retrieval</param>
            <param name="updatedPerson">PersonForModification the Request Model with New Person Name</param>
            <remarks>Change Person providing PersonForModificationUiModel with Modified Person Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.DeletePersonRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Person 
            </summary>
            <param name="id">Person Id for Deletion</param>
            <remarks>Delete Existing Person </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.DeleteHardPersonRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Person 
            </summary>
            <param name="id">Person Id for Deletion</param>
            <remarks>Delete Existing Person </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.PersonsController.GetPersonsAsync">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Persons 
            </summary>
            <remarks>Retrieve paged Persons providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.PostQuestionRouteAsync(soa.common.dtos.Vms.Questions.QuestionForCreationUiModel)">
            <summary>
            POST : Create a New Question.
            </summary>
            <param name="questionForCreationDto">QuestionForCreationDto the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Question is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the Question is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.GetQuestionAsync(System.Int32)">
            <summary>
            Get : Retrieve Stored providing Question Id
            </summary>
            <param name="id">Question Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Question</param>
            <remarks>Retrieve Question Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.UpdateQuestionAsync(System.Int32,soa.common.dtos.Vms.Questions.QuestionForModificationUiModel)">
            <summary>
            PUT : Update Question with New Question Name
            </summary>
            <param name="id">Question Id the Request Index for Retrieval</param>
            <param name="updatedQuestion">QuestionForModification the Request Model with New Question Name</param>
            <remarks>Change Question providing QuestionForModificationUiModel with Modified Question Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.DeleteQuestionRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Question 
            </summary>
            <param name="id">Question Id for Deletion</param>
            <remarks>Delete Existing Question </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.DeleteHardQuestionRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Question 
            </summary>
            <param name="id">Question Id for Deletion</param>
            <remarks>Delete Existing Question </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.QuestionsController.GetQuestionsAsync">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Questions 
            </summary>
            <remarks>Retrieve paged Questions providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.PostTagRouteAsync(soa.common.dtos.Vms.Tags.TagForCreationUiModel)">
            <summary>
            POST : Create a New Tag.
            </summary>
            <param name="tagForCreationDto">TagForCreationDto the Request Model for Creation</param>
            <remarks> return a ResponseEntity with status 201 (Created) if the new Tag is created, 400 (Bad Request), 500 (Server Error) </remarks>
            <response code="201">Created (if the Tag is created)</response>
            <response code="400">Bad Request</response>
            <response code="500">Internal Server Error</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.GetTagAsync(System.Int32)">
            <summary>
            Get : Retrieve Stored providing Tag Id
            </summary>
            <param name="id">Tag Id the Request Index for Retrieval</param>
            <param name="fields">Fiends to be filtered with for the returned Tag</param>
            <remarks>Retrieve Tag Role providing Id and [Optional] fields</remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="404">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.UpdateTagAsync(System.Int32,soa.common.dtos.Vms.Tags.TagForModificationUiModel)">
            <summary>
            PUT : Update Tag with New Tag Name
            </summary>
            <param name="id">Tag Id the Request Index for Retrieval</param>
            <param name="updatedTag">TagForModification the Request Model with New Tag Name</param>
            <remarks>Change Tag providing TagForModificationUiModel with Modified Tag Name</remarks>
            <response code="200">Resource updated correctly.</response>
            <response code="400">The model is not in valid state.</response>
            <response code="403">You have not access for this action.</response>
            <response code="404">Wrong attributes provided.</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.DeleteTagRoot(System.Guid)">
            <summary>
            Delete - Delete an existing Tag 
            </summary>
            <param name="id">Tag Id for Deletion</param>
            <remarks>Delete Existing Tag </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.DeleteHardTagRoot(System.Int32)">
            <summary>
            Delete - Delete an existing Tag 
            </summary>
            <param name="id">Tag Id for Deletion</param>
            <remarks>Delete Existing Tag </remarks>
            <response code="200">Resource retrieved correctly</response>
            <response code="400">Resource Not Found</response>
            <response code="500">Internal Server Error.</response>
        </member>
        <member name="M:soa.qa.api.Controllers.API.V1.TagsController.GetTagsAsync">
            <summary>
            Get : Retrieve All/or Partial Paged Stored Tags 
            </summary>
            <remarks>Retrieve paged Tags providing Paging Query</remarks>
            <response code="200">Resource retrieved correctly.</response>
            <response code="500">Internal Server Error.</response>
        </member>
    </members>
</doc>
